class Edge:
    def __init__(self, src, dest ,wt):
        self.src = src
        self.dest = dest
        self.wt  = wt

li = [int(ele) for ele in input().split()]
n = li[0]
e = li[1]
edges = []
def getparent( v , parent):
    if v == parent[v]:
        return v
    return getparent(parent[v] , parent)
def kruskal(edges , nvertices):
    parent = [i for i in range(nvertices)]
    edges = sorted(edges , key = lambda edge:edge.wt)
    out = []
    count = 0
    i = 0
    while(count <(nvertices-1)):
        current_edge = edges[i]
        srcparent = getparent(current_edge.src , parent)
        destparent = getparent(current_edge.dest , parent)
        if srcparent != destparent:
            out.append(current_edge)
            count += 1
            parent[srcparent] = destparent
        i = i+1
    return out
# for taking the input
for i in range(e):
    current_input = [int(ele) for ele in input().split()]
    src = current_input[0]
    dest = current_input[1]
    wt = current_input[2]
    edge = Edge(src, dest , wt)
    edges.append(edge)
out = kruskal(edges , n)
# for output printing
for edge in out:
    if edge.src < edge.dest:
        print(str(edge.src)+ " " + str(edge.dest)+ " "+ str(edge.wt))
    else:
        print(str(edge.dest)+ " " + str(edge.src)+ " "+ str(edge.wt))
""" 4 4
0 1 2
1 3 3
0 2 5
2 3 8
out:
0 1 2
1 3 3
0 2 5   """
